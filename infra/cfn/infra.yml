AWSTemplateFormatVersion: "2010-09-09"
Description: "lenders-library - bucket, bucket policy, cloudfront, OAI, certificate"
Parameters:
  GivenDomain:
    Type: String
    Description: The DNS name for the root of the site
    ConstraintDescription: must be a valid DNS zone name.
  GivenDomainUndi:
    Type: String
    Description: The DNS name for the root of the site but with underscores
    ConstraintDescription: must be a valid DNS zone name.
  HostedZoneId:
    Type: String
    Description: The Id of an Amazon Route 53 hosted zone to create the alias in.
    ConstraintDescription: must be a valid DNS zone name.
Resources:
  Content:
    Type: AWS::S3::Bucket
  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "${Content} OAI"
  ReadPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref Content
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub "arn:aws:s3:::${Content}/*"
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: CDN for S3-backed website
        Aliases:
          - !Sub "${GivenDomain}"
          - !Sub "www.${GivenDomain}"
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: "TLSv1.2_2018"
          SslSupportMethod: "sni-only"
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: true
          TargetOriginId: s3origin
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCode: 404
          ResponsePagePath: "/index.html"
          ResponseCode: 200
        - ErrorCode: 403
          ResponsePagePath: "/index.html"
          ResponseCode: 200
        PriceClass: "PriceClass_100"
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: s3origin
            DomainName: !GetAtt "Content.DomainName"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Sub "${GivenDomain}"
      DomainValidationOptions:
        - DomainName: !Sub "${GivenDomain}"
          HostedZoneId: !Sub "${HostedZoneId}"
        - DomainName: !Sub "www.${GivenDomain}"
          HostedZoneId: !Sub "${HostedZoneId}"
      SubjectAlternativeNames: 
        - !Sub "${GivenDomain}"
        - !Sub "www.${GivenDomain}"
      ValidationMethod: DNS
  HostedZoneRecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      RecordSets:
        - Name: !Sub "${GivenDomain}"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # This is ALWAYS the cloudfront hosted zone ID
            DNSName: !GetAtt CDN.DomainName
        - Name: !Sub "www.${GivenDomain}"
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2 # This is ALWAYS the cloudfront hosted zone ID
            DNSName: !GetAtt CDN.DomainName
  CognitoPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameConfiguration: 
        CaseSensitive: false
      UserPoolName: !Sub ${GivenDomainUndi}-user-pool
      EnabledMfas:
        - "SOFTWARE_TOKEN_MFA"
      MfaConfiguration: "OPTIONAL"
      # AutoVerifiedAttributes:
      #   - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
  CognitoPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - http://localhost:3001
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
        # - Google
        # - Facebook
        # - SignInWithApple
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref GivenDomainUndi
      UserPoolId: !Ref CognitoPool
Outputs:
  BucketName:
    Description: "S3 Bucket Name"
    Value: !Ref Content
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-content-bucket
  DistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CDN
  Domain:
    Description: "Cloudfront Domain"
    Value: !GetAtt CDN.DomainName
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-cdn
  CognitoUserPoolID:
    Value: !Ref CognitoPool
    Description: The UserPool ID
  CognitoAppClientID:
    Value: !Ref CognitoPoolClient
    Description: The app client
  HostedUIURL:
    Value: !Sub https://${GivenDomainUndi}.auth.us-west-2.amazoncognito.com/login?client_id=${CognitoPoolClient}&response_type=code&scope=email+openid+phone+profile&redirect_uri=
    Description: The hosted UI URL